/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 *
 * @export
 * @interface AppApiCatalogSchemaPriceSchema
 */
export interface AppApiCatalogSchemaPriceSchema {
    /**
     *
     * @type {number}
     * @memberof AppApiCatalogSchemaPriceSchema
     */
    'price': number;
    /**
     *
     * @type {number}
     * @memberof AppApiCatalogSchemaPriceSchema
     */
    'price_yandex'?: number | null;
    /**
     *
     * @type {number}
     * @memberof AppApiCatalogSchemaPriceSchema
     */
    'price_ozone'?: number | null;
    /**
     *
     * @type {string}
     * @memberof AppApiCatalogSchemaPriceSchema
     */
    'created_at': string;
    /**
     *
     * @type {string}
     * @memberof AppApiCatalogSchemaPriceSchema
     */
    'updated_at': string;
    /**
     *
     * @type {number}
     * @memberof AppApiCatalogSchemaPriceSchema
     */
    'product_id': number;
    /**
     *
     * @type {number}
     * @memberof AppApiCatalogSchemaPriceSchema
     */
    'id': number;
}
/**
 *
 * @export
 * @interface AppApiCatalogSchemaProductSchema
 */
export interface AppApiCatalogSchemaProductSchema {
    /**
     *
     * @type {string}
     * @memberof AppApiCatalogSchemaProductSchema
     */
    'link_1s': string;
    /**
     *
     * @type {string}
     * @memberof AppApiCatalogSchemaProductSchema
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof AppApiCatalogSchemaProductSchema
     */
    'full_name': string;
    /**
     *
     * @type {number}
     * @memberof AppApiCatalogSchemaProductSchema
     */
    'nds_id': number;
    /**
     *
     * @type {string}
     * @memberof AppApiCatalogSchemaProductSchema
     */
    'article'?: string | null;
    /**
     *
     * @type {number}
     * @memberof AppApiCatalogSchemaProductSchema
     */
    'unit_id': number;
    /**
     *
     * @type {string}
     * @memberof AppApiCatalogSchemaProductSchema
     */
    'link_vendor': string;
    /**
     *
     * @type {string}
     * @memberof AppApiCatalogSchemaProductSchema
     */
    'description'?: string | null;
    /**
     *
     * @type {number}
     * @memberof AppApiCatalogSchemaProductSchema
     */
    'manufacture_id': number;
    /**
     *
     * @type {string}
     * @memberof AppApiCatalogSchemaProductSchema
     */
    'link_unit': string;
    /**
     *
     * @type {Array<string>}
     * @memberof AppApiCatalogSchemaProductSchema
     */
    'barcodes'?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof AppApiCatalogSchemaProductSchema
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof AppApiCatalogSchemaProductSchema
     */
    'created_at': string;
    /**
     *
     * @type {string}
     * @memberof AppApiCatalogSchemaProductSchema
     */
    'link_nds': string;
    /**
     *
     * @type {number}
     * @memberof AppApiCatalogSchemaProductSchema
     */
    'brand_id': number;
    /**
     *
     * @type {string}
     * @memberof AppApiCatalogSchemaProductSchema
     */
    'updated_at': string;
    /**
     *
     * @type {string}
     * @memberof AppApiCatalogSchemaProductSchema
     */
    'code'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AppApiCatalogSchemaProductSchema
     */
    'find_code'?: string | null;
    /**
     *
     * @type {AppApiCatalogSchemaPriceSchema}
     * @memberof AppApiCatalogSchemaProductSchema
     */
    'price': AppApiCatalogSchemaPriceSchema;
}
/**
 *
 * @export
 * @interface AppApiProductSchemaBrandSchema
 */
export interface AppApiProductSchemaBrandSchema {
    /**
     *
     * @type {number}
     * @memberof AppApiProductSchemaBrandSchema
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof AppApiProductSchemaBrandSchema
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof AppApiProductSchemaBrandSchema
     */
    'link_1s': string | null;
}
/**
 *
 * @export
 * @interface AppApiProductSchemaPriceSchema
 */
export interface AppApiProductSchemaPriceSchema {
    /**
     *
     * @type {number}
     * @memberof AppApiProductSchemaPriceSchema
     */
    'price': number;
    /**
     *
     * @type {number}
     * @memberof AppApiProductSchemaPriceSchema
     */
    'price_ozone': number;
    /**
     *
     * @type {number}
     * @memberof AppApiProductSchemaPriceSchema
     */
    'price_yandex': number;
}
/**
 *
 * @export
 * @interface AppApiProductSchemaProductSchema
 */
export interface AppApiProductSchemaProductSchema {
    /**
     *
     * @type {number}
     * @memberof AppApiProductSchemaProductSchema
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof AppApiProductSchemaProductSchema
     */
    'link_1s': string | null;
    /**
     *
     * @type {string}
     * @memberof AppApiProductSchemaProductSchema
     */
    'link_vendor': string | null;
    /**
     *
     * @type {string}
     * @memberof AppApiProductSchemaProductSchema
     */
    'link_unit': string | null;
    /**
     *
     * @type {string}
     * @memberof AppApiProductSchemaProductSchema
     */
    'link_nds': string | null;
    /**
     *
     * @type {string}
     * @memberof AppApiProductSchemaProductSchema
     */
    'code': string | null;
    /**
     *
     * @type {string}
     * @memberof AppApiProductSchemaProductSchema
     */
    'find_code': string | null;
    /**
     *
     * @type {string}
     * @memberof AppApiProductSchemaProductSchema
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof AppApiProductSchemaProductSchema
     */
    'full_name': string | null;
    /**
     *
     * @type {string}
     * @memberof AppApiProductSchemaProductSchema
     */
    'article': string | null;
    /**
     *
     * @type {string}
     * @memberof AppApiProductSchemaProductSchema
     */
    'description': string | null;
    /**
     *
     * @type {Array<string>}
     * @memberof AppApiProductSchemaProductSchema
     */
    'barcodes': Array<string> | null;
    /**
     *
     * @type {AppApiProductSchemaBrandSchema}
     * @memberof AppApiProductSchemaProductSchema
     */
    'brand': AppApiProductSchemaBrandSchema | null;
    /**
     *
     * @type {NDSSchema}
     * @memberof AppApiProductSchemaProductSchema
     */
    'nds': NDSSchema | null;
    /**
     *
     * @type {UnitSchema}
     * @memberof AppApiProductSchemaProductSchema
     */
    'unit': UnitSchema | null;
    /**
     *
     * @type {ManufactureSchema}
     * @memberof AppApiProductSchemaProductSchema
     */
    'manufacture': ManufactureSchema | null;
    /**
     *
     * @type {AppApiProductSchemaPriceSchema}
     * @memberof AppApiProductSchemaProductSchema
     */
    'price': AppApiProductSchemaPriceSchema | null;
    /**
     *
     * @type {RemainSchema}
     * @memberof AppApiProductSchemaProductSchema
     */
    'remain': RemainSchema | null;
    /**
     *
     * @type {string}
     * @memberof AppApiProductSchemaProductSchema
     */
    'created_at': string;
    /**
     *
     * @type {string}
     * @memberof AppApiProductSchemaProductSchema
     */
    'updated_at': string;
}
/**
 *
 * @export
 * @interface AppApiSchemasBrandSchema
 */
export interface AppApiSchemasBrandSchema {
    /**
     *
     * @type {number}
     * @memberof AppApiSchemasBrandSchema
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof AppApiSchemasBrandSchema
     */
    'brand_name': string;
}
/**
 *
 * @export
 * @interface CatalogResponseSchema
 */
export interface CatalogResponseSchema {
    /**
     *
     * @type {number}
     * @memberof CatalogResponseSchema
     */
    'max_result': number;
    /**
     *
     * @type {number}
     * @memberof CatalogResponseSchema
     */
    'page': number;
    /**
     *
     * @type {string}
     * @memberof CatalogResponseSchema
     */
    'startswith'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CatalogResponseSchema
     */
    'endswith'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CatalogResponseSchema
     */
    'contains'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CatalogResponseSchema
     */
    'article'?: string | null;
    /**
     *
     * @type {number}
     * @memberof CatalogResponseSchema
     */
    'price_from'?: number | null;
    /**
     *
     * @type {number}
     * @memberof CatalogResponseSchema
     */
    'price_to'?: number | null;
    /**
     *
     * @type {string}
     * @memberof CatalogResponseSchema
     */
    'work_type'?: string;
    /**
     *
     * @type {number}
     * @memberof CatalogResponseSchema
     */
    'kind_search': number;
    /**
     *
     * @type {Array<AppApiCatalogSchemaProductSchema>}
     * @memberof CatalogResponseSchema
     */
    'data': Array<AppApiCatalogSchemaProductSchema>;
    /**
     *
     * @type {number}
     * @memberof CatalogResponseSchema
     */
    'total_products'?: number;
    /**
     *
     * @type {number}
     * @memberof CatalogResponseSchema
     */
    'total_pages'?: number;
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     *
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 *
 * @export
 * @interface ManufactureSchema
 */
export interface ManufactureSchema {
    /**
     *
     * @type {number}
     * @memberof ManufactureSchema
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof ManufactureSchema
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof ManufactureSchema
     */
    'link_1s': string | null;
}
/**
 *
 * @export
 * @interface NDSSchema
 */
export interface NDSSchema {
    /**
     *
     * @type {number}
     * @memberof NDSSchema
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof NDSSchema
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof NDSSchema
     */
    'percent': number;
}
/**
 *
 * @export
 * @interface Price
 */
export interface Price {
    /**
     *
     * @type {number}
     * @memberof Price
     */
    'price'?: number;
    /**
     *
     * @type {number}
     * @memberof Price
     */
    'price_ozone'?: number;
    /**
     *
     * @type {number}
     * @memberof Price
     */
    'price_yandex'?: number;
    /**
     *
     * @type {number}
     * @memberof Price
     */
    'product_id'?: number;
    /**
     *
     * @type {number}
     * @memberof Price
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    'created_at': string;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    'updated_at': string;
}
/**
 *
 * @export
 * @interface PricesBaseSchema
 */
export interface PricesBaseSchema {
    /**
     *
     * @type {number}
     * @memberof PricesBaseSchema
     */
    'id': number;
    /**
     *
     * @type {number}
     * @memberof PricesBaseSchema
     */
    'price': number;
}
/**
 *
 * @export
 * @interface ProductQuantityBase
 */
export interface ProductQuantityBase {
    /**
     *
     * @type {number}
     * @memberof ProductQuantityBase
     */
    'product_id': number;
    /**
     *
     * @type {number}
     * @memberof ProductQuantityBase
     */
    'actual_change'?: number;
}
/**
 *
 * @export
 * @interface ProductReservedUpdate
 */
export interface ProductReservedUpdate {
    /**
     *
     * @type {number}
     * @memberof ProductReservedUpdate
     */
    'product_id': number;
    /**
     *
     * @type {number}
     * @memberof ProductReservedUpdate
     */
    'reserved_change': number;
}
/**
 *
 * @export
 * @interface RemainSchema
 */
export interface RemainSchema {
    /**
     *
     * @type {number}
     * @memberof RemainSchema
     */
    'actual_quantity': number;
    /**
     *
     * @type {number}
     * @memberof RemainSchema
     */
    'reserved_quantity': number;
}
/**
 *
 * @export
 * @interface SUserAuth
 */
export interface SUserAuth {
    /**
     * Электронная почта
     * @type {string}
     * @memberof SUserAuth
     */
    'email': string;
    /**
     * Пароль, от 5 до 50 знаков
     * @type {string}
     * @memberof SUserAuth
     */
    'password': string;
}
/**
 *
 * @export
 * @interface SUserRegister
 */
export interface SUserRegister {
    /**
     * Электронная почта
     * @type {string}
     * @memberof SUserRegister
     */
    'email': string;
    /**
     * Пароль, от 5 до 50 знаков
     * @type {string}
     * @memberof SUserRegister
     */
    'password': string;
    /**
     * Номер телефона в международном формате, начинающийся с \'+\'
     * @type {string}
     * @memberof SUserRegister
     */
    'phone_number': string;
    /**
     * Имя, от 3 до 50 символов
     * @type {string}
     * @memberof SUserRegister
     */
    'first_name': string;
    /**
     * Фамилия, от 3 до 50 символов
     * @type {string}
     * @memberof SUserRegister
     */
    'last_name': string;
}
/**
 *
 * @export
 * @interface UnitSchema
 */
export interface UnitSchema {
    /**
     *
     * @type {number}
     * @memberof UnitSchema
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof UnitSchema
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof UnitSchema
     */
    'link_1s': string | null;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     *
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     *
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     *
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 *
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary API для каталога
         * @param {number} [maxResult]
         * @param {number} [page]
         * @param {number} [kindSearch]
         * @param {string | null} [startswith]
         * @param {string | null} [endswith]
         * @param {string | null} [contains]
         * @param {string | null} [article]
         * @param {number} [priceFrom]
         * @param {number} [priceTo]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogApiApiCatalogGet: async (maxResult?: number, page?: number, kindSearch?: number, startswith?: string | null, endswith?: string | null, contains?: string | null, article?: string | null, priceFrom?: number, priceTo?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/catalog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxResult !== undefined) {
                localVarQueryParameter['max_result'] = maxResult;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (kindSearch !== undefined) {
                localVarQueryParameter['kind_search'] = kindSearch;
            }

            if (startswith !== undefined) {
                localVarQueryParameter['startswith'] = startswith;
            }

            if (endswith !== undefined) {
                localVarQueryParameter['endswith'] = endswith;
            }

            if (contains !== undefined) {
                localVarQueryParameter['contains'] = contains;
            }

            if (article !== undefined) {
                localVarQueryParameter['article'] = article;
            }

            if (priceFrom !== undefined) {
                localVarQueryParameter['price_from'] = priceFrom;
            }

            if (priceTo !== undefined) {
                localVarQueryParameter['price_to'] = priceTo;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получить полную информацию о товаре
         * @param {number} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullProductInfoApiProductInfoItemIdGet: async (itemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getFullProductInfoApiProductInfoItemIdGet', 'itemId', itemId)
            const localVarPath = `/api/product_info/{item_id}`
                .replace(`{${"item_id"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Метод для увеличения реального остатка товара при передаче положительного целого значений и для уменьшенения реального остатка если передано отрицательное значение.
         * @summary Увеличение/уменьшение реального остатка
         * @param {ProductQuantityBase} productQuantityBase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        increaseActualQuantityApiEditActualQuantityPut: async (productQuantityBase: ProductQuantityBase, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productQuantityBase' is not null or undefined
            assertParamExists('increaseActualQuantityApiEditActualQuantityPut', 'productQuantityBase', productQuantityBase)
            const localVarPath = `/api/edit_actual_quantity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productQuantityBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получить список всех брендов (вся информация)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readBrandsApiBrandsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/brands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получить цену для конкретного товара
         * @param {number} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPricesApiPriceItemIdGet: async (itemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('readPricesApiPriceItemIdGet', 'itemId', itemId)
            const localVarPath = `/api/price/{item_id}`
                .replace(`{${"item_id"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получить полный список базовых цен на 1000 товаров
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPricesApiPricesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/prices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Метод для обновления замороженного остатка товара. Положительное значение отнимает от реального остатка и добавляет к замороженному, отрицательное - наоборот.
         * @summary Обновление замороженного остатка
         * @param {ProductReservedUpdate} productReservedUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReservedQuantityApiUpdateReservedQuantityPut: async (productReservedUpdate: ProductReservedUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productReservedUpdate' is not null or undefined
            assertParamExists('updateReservedQuantityApiUpdateReservedQuantityPut', 'productReservedUpdate', productReservedUpdate)
            const localVarPath = `/api/update_reserved_quantity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productReservedUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary API для каталога
         * @param {number} [maxResult]
         * @param {number} [page]
         * @param {number} [kindSearch]
         * @param {string | null} [startswith]
         * @param {string | null} [endswith]
         * @param {string | null} [contains]
         * @param {string | null} [article]
         * @param {number} [priceFrom]
         * @param {number} [priceTo]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogApiApiCatalogGet(maxResult?: number, page?: number, kindSearch?: number, startswith?: string | null, endswith?: string | null, contains?: string | null, article?: string | null, priceFrom?: number, priceTo?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogResponseSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogApiApiCatalogGet(maxResult, page, kindSearch, startswith, endswith, contains, article, priceFrom, priceTo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.catalogApiApiCatalogGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Получить полную информацию о товаре
         * @param {number} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFullProductInfoApiProductInfoItemIdGet(itemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppApiProductSchemaProductSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFullProductInfoApiProductInfoItemIdGet(itemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getFullProductInfoApiProductInfoItemIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Метод для увеличения реального остатка товара при передаче положительного целого значений и для уменьшенения реального остатка если передано отрицательное значение.
         * @summary Увеличение/уменьшение реального остатка
         * @param {ProductQuantityBase} productQuantityBase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async increaseActualQuantityApiEditActualQuantityPut(productQuantityBase: ProductQuantityBase, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.increaseActualQuantityApiEditActualQuantityPut(productQuantityBase, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.increaseActualQuantityApiEditActualQuantityPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Получить список всех брендов (вся информация)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readBrandsApiBrandsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppApiSchemasBrandSchema>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readBrandsApiBrandsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readBrandsApiBrandsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Получить цену для конкретного товара
         * @param {number} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPricesApiPriceItemIdGet(itemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Price>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readPricesApiPriceItemIdGet(itemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readPricesApiPriceItemIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Получить полный список базовых цен на 1000 товаров
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPricesApiPricesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PricesBaseSchema>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readPricesApiPricesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readPricesApiPricesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Метод для обновления замороженного остатка товара. Положительное значение отнимает от реального остатка и добавляет к замороженному, отрицательное - наоборот.
         * @summary Обновление замороженного остатка
         * @param {ProductReservedUpdate} productReservedUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReservedQuantityApiUpdateReservedQuantityPut(productReservedUpdate: ProductReservedUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReservedQuantityApiUpdateReservedQuantityPut(productReservedUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateReservedQuantityApiUpdateReservedQuantityPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         *
         * @summary API для каталога
         * @param {number} [maxResult]
         * @param {number} [page]
         * @param {number} [kindSearch]
         * @param {string | null} [startswith]
         * @param {string | null} [endswith]
         * @param {string | null} [contains]
         * @param {string | null} [article]
         * @param {number} [priceFrom]
         * @param {number} [priceTo]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogApiApiCatalogGet(maxResult?: number, page?: number, kindSearch?: number, startswith?: string | null, endswith?: string | null, contains?: string | null, article?: string | null, priceFrom?: number, priceTo?: number, options?: RawAxiosRequestConfig): AxiosPromise<CatalogResponseSchema> {
            return localVarFp.catalogApiApiCatalogGet(maxResult, page, kindSearch, startswith, endswith, contains, article, priceFrom, priceTo, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Получить полную информацию о товаре
         * @param {number} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullProductInfoApiProductInfoItemIdGet(itemId: number, options?: RawAxiosRequestConfig): AxiosPromise<AppApiProductSchemaProductSchema> {
            return localVarFp.getFullProductInfoApiProductInfoItemIdGet(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * Метод для увеличения реального остатка товара при передаче положительного целого значений и для уменьшенения реального остатка если передано отрицательное значение.
         * @summary Увеличение/уменьшение реального остатка
         * @param {ProductQuantityBase} productQuantityBase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        increaseActualQuantityApiEditActualQuantityPut(productQuantityBase: ProductQuantityBase, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.increaseActualQuantityApiEditActualQuantityPut(productQuantityBase, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Получить список всех брендов (вся информация)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readBrandsApiBrandsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<AppApiSchemasBrandSchema>> {
            return localVarFp.readBrandsApiBrandsGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Получить цену для конкретного товара
         * @param {number} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPricesApiPriceItemIdGet(itemId: number, options?: RawAxiosRequestConfig): AxiosPromise<Price> {
            return localVarFp.readPricesApiPriceItemIdGet(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Получить полный список базовых цен на 1000 товаров
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPricesApiPricesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<PricesBaseSchema>> {
            return localVarFp.readPricesApiPricesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Метод для обновления замороженного остатка товара. Положительное значение отнимает от реального остатка и добавляет к замороженному, отрицательное - наоборот.
         * @summary Обновление замороженного остатка
         * @param {ProductReservedUpdate} productReservedUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReservedQuantityApiUpdateReservedQuantityPut(productReservedUpdate: ProductReservedUpdate, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.updateReservedQuantityApiUpdateReservedQuantityPut(productReservedUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     *
     * @summary API для каталога
     * @param {number} [maxResult]
     * @param {number} [page]
     * @param {number} [kindSearch]
     * @param {string | null} [startswith]
     * @param {string | null} [endswith]
     * @param {string | null} [contains]
     * @param {string | null} [article]
     * @param {number} [priceFrom]
     * @param {number} [priceTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public catalogApiApiCatalogGet(params:{maxResult?: number, page?: number, kindSearch?: number, startswith?: string | null, endswith?: string | null, contains?: string | null, article?: string | null, priceFrom?: number, priceTo?: number, options?: RawAxiosRequestConfig
}) {
        const {maxResult, page, kindSearch, startswith, endswith, contains, article, priceFrom, priceTo, options
    } = params
        return DefaultApiFp(this.configuration).catalogApiApiCatalogGet(maxResult, page, kindSearch, startswith, endswith, contains, article, priceFrom, priceTo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Получить полную информацию о товаре
     * @param {number} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFullProductInfoApiProductInfoItemIdGet(itemId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getFullProductInfoApiProductInfoItemIdGet(itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Метод для увеличения реального остатка товара при передаче положительного целого значений и для уменьшенения реального остатка если передано отрицательное значение.
     * @summary Увеличение/уменьшение реального остатка
     * @param {ProductQuantityBase} productQuantityBase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public increaseActualQuantityApiEditActualQuantityPut(productQuantityBase: ProductQuantityBase, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).increaseActualQuantityApiEditActualQuantityPut(productQuantityBase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Получить список всех брендов (вся информация)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readBrandsApiBrandsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readBrandsApiBrandsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Получить цену для конкретного товара
     * @param {number} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readPricesApiPriceItemIdGet(itemId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readPricesApiPriceItemIdGet(itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Получить полный список базовых цен на 1000 товаров
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readPricesApiPricesGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readPricesApiPricesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Метод для обновления замороженного остатка товара. Положительное значение отнимает от реального остатка и добавляет к замороженному, отрицательное - наоборот.
     * @summary Обновление замороженного остатка
     * @param {ProductReservedUpdate} productReservedUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateReservedQuantityApiUpdateReservedQuantityPut(productReservedUpdate: ProductReservedUpdate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateReservedQuantityApiUpdateReservedQuantityPut(productReservedUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Auth User
         * @param {SUserAuth} sUserAuth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authUserAuthLoginPost: async (sUserAuth: SUserAuth, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sUserAuth' is not null or undefined
            assertParamExists('authUserAuthLoginPost', 'sUserAuth', sUserAuth)
            const localVarPath = `/auth/login/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sUserAuth, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get All Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersAuthAllUsersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/all_users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeAuthMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Logout User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUserAuthLogoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Register User
         * @param {SUserRegister} sUserRegister
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUserAuthRegisterPost: async (sUserRegister: SUserRegister, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sUserRegister' is not null or undefined
            assertParamExists('registerUserAuthRegisterPost', 'sUserRegister', sUserRegister)
            const localVarPath = `/auth/register/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sUserRegister, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Auth User
         * @param {SUserAuth} sUserAuth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authUserAuthLoginPost(sUserAuth: SUserAuth, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authUserAuthLoginPost(sUserAuth, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authUserAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get All Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsersAuthAllUsersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsersAuthAllUsersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.getAllUsersAuthAllUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeAuthMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeAuthMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.getMeAuthMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Logout User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutUserAuthLogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutUserAuthLogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.logoutUserAuthLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Register User
         * @param {SUserRegister} sUserRegister
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUserAuthRegisterPost(sUserRegister: SUserRegister, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUserAuthRegisterPost(sUserRegister, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.registerUserAuthRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         *
         * @summary Auth User
         * @param {SUserAuth} sUserAuth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authUserAuthLoginPost(sUserAuth: SUserAuth, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.authUserAuthLoginPost(sUserAuth, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get All Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersAuthAllUsersGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getAllUsersAuthAllUsersGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeAuthMeGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getMeAuthMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Logout User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUserAuthLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.logoutUserAuthLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Register User
         * @param {SUserRegister} sUserRegister
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUserAuthRegisterPost(sUserRegister: SUserRegister, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.registerUserAuthRegisterPost(sUserRegister, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     *
     * @summary Auth User
     * @param {SUserAuth} sUserAuth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authUserAuthLoginPost(sUserAuth: SUserAuth, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authUserAuthLoginPost(sUserAuth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get All Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getAllUsersAuthAllUsersGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).getAllUsersAuthAllUsersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getMeAuthMeGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).getMeAuthMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Logout User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public logoutUserAuthLogoutPost(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).logoutUserAuthLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Register User
     * @param {SUserRegister} sUserRegister
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public registerUserAuthRegisterPost(sUserRegister: SUserRegister, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).registerUserAuthRegisterPost(sUserRegister, options).then((request) => request(this.axios, this.basePath));
    }
}



